# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_pandas_visor.ipynb.

# %% ../nbs/03_pandas_visor.ipynb 0
from __future__ import annotations

# %% auto 0
__all__ = ['DFVisor']

# %% ../nbs/03_pandas_visor.ipynb 5
import asyncio
import math
from types import SimpleNamespace as NS
from typing import cast

import ipywidgets as W
import numpy as np
import pandas as pd
from pandas.io.formats.style import Styler

from vutil.imports import AD
from vutil.pandas.transformer import DataFrameStyler
from vutil.pandas.util import FTStyler
from vutil.pandas.util import PANDAS
from .base_widget import BaseExplorerApp


# %% ../nbs/03_pandas_visor.ipynb 9
_STYLE = PANDAS.style

config = NS(
    PANDAS = PANDAS,
    THEME = 'dark'
)


# %% ../nbs/03_pandas_visor.ipynb 23
class DFVisor(BaseExplorerApp):
    # ---------- ---------- display ---------- ----------
    def d(self):
        if self.df is not None:
            self(self.df)

    # ---------- ---------- UI view ---------- ----------
    # def setup_layout(self):
    #     center = W.Box(
    #             [self._w.out],
    #             layout=W.Layout(
    #                 height="100%", width='100%', margin='0px', border='0.1px solid red')
    #         )
    #     return dict(center=center)

    # ---------- ---------- UX ---------- ----------
    # def reflect_changed(self, change):
    #     q = change.new
    #     if 'result' in q:
    #         h = f"{math.ceil(q['result']['width'])}px"
    #         if self.dcons is not None:
    #             self.dcons.log(f"{h = }")
    #         self._w.out.layout.max_width = h

    # def setup_ux(self, state):
    #     super().setup_ux(state)
    #     self.reflect.observe(self.reflect_changed, names='query')  # type: ignore

    def __init__(self, 
            df: pd.DataFrame | Styler | None = None, 
            height=300, 
            # width: int | None = 1000,
            **kwargs
        ):
            self.df = df
            self.stlr: DataFrameStyler = kwargs.pop(
                'stlr', DataFrameStyler(table_styles=PANDAS.style.default_table_style))
            reflect = kwargs.pop('reflect', True)
            super().__init__(widgets = AD(out=W.Output()),
                layout=AD(max_height=f"{height+20}px"), reflect=reflect, **kwargs)

    def __call__(self, df: pd.DataFrame | Styler):
        self._w.out.clear_output()
        if isinstance(df, Styler):
            self.stl = df
        else:
            stlr = self.stlr.on(df)
            widths = stlr.get_col_widths(df)
            w = sum(widths.values())
            self._w.out.layout.width = f"{w * 0.75}ch"  # type: ignore
            self.stl = stlr()

            def _f2(w):
                assert self.reflect is not None
                q: dict = cast(dict, self.reflect.query)
                if 'result' in q:
                    width = f"{math.ceil(q['result']['width'])}px"
                    if self.dcons is not None:
                        self.dcons.log(f"{width = }")
                    self._w.out.layout.width = width
                    
            def _show():
                assert self.reflect is not None
                # self._r.query = {'sn':347, 
                #     'id':f"T_{self.stl.uuid}", 'kind':'method', 'method':'getBoundingClientRect'}
                uuid = cast(FTStyler, self.stl).uuid
                fut = self.reflect.get_result({'selector':f"#T_{uuid}", 'method':'getBoundingClientRect'}, _f2)
                if self.dcons:
                    self.dcons.log(f"{fut = }")
            
            loop = asyncio.get_event_loop()
            loop.call_later(0.1, _show)
        self._w.out.append_display_data(self.stl)

